local BASE_URL = "https://love2d.org"

--- Quickhelp Documentation (ctrl-J)
-- This is called when the user invokes quick help via ctrl-j, or by
-- having the quickhelp panel open and set to autolookup
-- @param name The name to get documentation for.
-- @return the documentation as an HTML or plain text string
function getDocumentation(name)
    -- Use for development
    -- disableCache()

    local data = fetchURL(getDocumentationUrl(name))

    local contentTag = [[<div id="bodyContent">]]
    local footerTag = [[<div class="printfooter]]

    local contentPos = data:find(contentTag)
    local footerPos = data:find(footerTag)

    if contentPos == nil then
        return "<html><h3>" .. name .. "</h3>Could not load from Love wiki.<br><br><b>[data from love2d.org]</b></html>"
    end

    data = data:sub(contentPos, footerPos)

    data =  data:gsub([[href="]], [[href="]]..BASE_URL)
    data =  data:gsub([[src="]], [[src="]]..BASE_URL)

    data = "<html><h3>" .. name .. "</h3>" .. data .. "<br><br><b>[data from love2d.org]</b></html>"

    return data
end

--- External Documentation URL (shift-F1)
-- This is called by shift-F1 on the symbol, or by the
-- external documentation button on the quick help panel
-- @param name The name to get documentation for.
-- @return the URL of the external documentation
function getDocumentationUrl(name)
    return BASE_URL .. "/wiki/" .. name
end


--- Quick Navigation Tooltip Text, (ctrl-hover on symbol)
-- This is called when the user ctrl-hovers over a symbol
-- @param name The name to get documentation for.
-- @return the documentation as a plain text string
function getQuickNavigateDocumentation(name)
    local sig = SIGNATURES[name]
    if not sig then return name end
    return SIGNATURES[name]
end


SIGNATURES = {
["love.data"] = [=[love.data - Provides functionality for creating and transforming data.]=],
["love.data.compress"] = [=[compress(container, format, rawstring, level) - Compresses a string or data using a specific compression algorithm.]=],
["love.data.decode"] = [=[decode(containerType, format, sourceString) - Decode Data or a string from any of the EncodeFormats to Data or string.]=],
["love.data.decompress"] = [=[decompress(container, compressedData) - Decompresses a CompressedData or previously compressed string or Data object.]=],
["love.data.encode"] = [=[encode(containerType, format, sourceString, lineLength) - Encode Data or a string to a Data or string in one of the EncodeFormats.]=],
["love.data.hash"] = [=[hash(hashFunction, string) - Compute the message digest of a string using a specified hash algorithm.]=],
}
